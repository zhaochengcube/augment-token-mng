name: Version Bump and Tag

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
        default: 'patch'
      custom_version:
        description: 'Custom version (only used when version_type is "custom", e.g., 1.2.3)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TAP_DISPATCH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"
          
          if [ "$VERSION_TYPE" = "custom" ]; then
            if [ -z "$CUSTOM_VERSION" ]; then
              echo "Error: Custom version is required when version_type is 'custom'" >&2
              exit 1
            fi
            # Validate semver format
            if ! echo "$CUSTOM_VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
              echo "Error: Custom version must be in semver format (e.g., 1.2.3)" >&2
              exit 1
            fi
            NEW_VERSION="$CUSTOM_VERSION"
          else
            # Parse current version
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            
            case "$VERSION_TYPE" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update package.json
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "
          echo "✅ Updated package.json to $NEW_VERSION"

      - name: Update Cargo.toml
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          sed -i.bak "s/^version = \".*\"/version = \"$NEW_VERSION\"/" src-tauri/Cargo.toml
          rm -f src-tauri/Cargo.toml.bak
          echo "✅ Updated src-tauri/Cargo.toml to $NEW_VERSION"

      - name: Update tauri.conf.json
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          node -e "
            const fs = require('fs');
            const config = JSON.parse(fs.readFileSync('src-tauri/tauri.conf.json', 'utf8'));
            config.version = '$NEW_VERSION';
            fs.writeFileSync('src-tauri/tauri.conf.json', JSON.stringify(config, null, 2) + '\n');
          "
          echo "✅ Updated src-tauri/tauri.conf.json to $NEW_VERSION"

      - name: Update Cargo.lock
        run: |
          cd src-tauri
          # Update Cargo.lock to reflect the new version
          cargo update --workspace --offline 2>/dev/null || cargo generate-lockfile
          echo "✅ Updated src-tauri/Cargo.lock"

      - name: Commit version changes
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json src-tauri/Cargo.toml src-tauri/tauri.conf.json src-tauri/Cargo.lock
          git commit -m "chore: bump version to $NEW_VERSION"
          git push origin ${{ github.ref_name }}
          echo "✅ Committed and pushed version changes"

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          TAG_NAME="v$NEW_VERSION"
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"
          echo "✅ Created and pushed tag: $TAG_NAME"

      - name: Summary
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          TAG_NAME="v$NEW_VERSION"
          echo "## 🎉 Version Bump Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version:** ${{ steps.current_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version:** $NEW_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag Created:** $TAG_NAME" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Tag \`$TAG_NAME\` has been created and pushed" >> $GITHUB_STEP_SUMMARY
          echo "2. 🚀 Build workflow will be triggered automatically" >> $GITHUB_STEP_SUMMARY
          echo "3. 📦 Check the **Actions** tab for build progress" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> ⚠️ **Note:** Automatic build requires \`WORKFLOW_PAT\` secret to be configured" >> $GITHUB_STEP_SUMMARY

